//
// ExpenseReimburseStatusTrackersAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class ExpenseReimburseStatusTrackersAPI {
    /**

     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiExpenseReimburseStatusTrackersApprovalFlowForRequestIdGet(_id: Int, completion: @escaping ((_ data: [ApprovalStatusFlowVM]?,_ error: Error?) -> Void)) {
        apiExpenseReimburseStatusTrackersApprovalFlowForRequestIdGetWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /api/ExpenseReimburseStatusTrackers/ApprovalFlowForRequest/{id}
     - 

     - examples: [{contentType=application/json, example=[ {
  "approvedDate" : "2000-01-23T04:56:07.000+00:00",
  "approverRole" : "approverRole",
  "approvalLevel" : 0,
  "approvalStatusType" : "approvalStatusType",
  "approverName" : "approverName"
}, {
  "approvedDate" : "2000-01-23T04:56:07.000+00:00",
  "approverRole" : "approverRole",
  "approvalLevel" : 0,
  "approvalStatusType" : "approvalStatusType",
  "approverName" : "approverName"
} ]}]
     - parameter _id: (path)  

     - returns: RequestBuilder<[ApprovalStatusFlowVM]> 
     */
    open class func apiExpenseReimburseStatusTrackersApprovalFlowForRequestIdGetWithRequestBuilder(_id: Int) -> RequestBuilder<[ApprovalStatusFlowVM]> {
        var path = "/api/ExpenseReimburseStatusTrackers/ApprovalFlowForRequest/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[ApprovalStatusFlowVM]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiExpenseReimburseStatusTrackersApprovalsPendingForApproverIdGet(_id: Int, completion: @escaping ((_ data: [ExpenseReimburseStatusTrackerDTO]?,_ error: Error?) -> Void)) {
        apiExpenseReimburseStatusTrackersApprovalsPendingForApproverIdGetWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /api/ExpenseReimburseStatusTrackers/ApprovalsPendingForApprover/{id}
     - 

     - examples: [{contentType=application/json, example=[ {
  "departmentName" : "departmentName",
  "finalApprovedDate" : "2000-01-23T04:56:07.000+00:00",
  "employeeName" : "employeeName",
  "subProjectName" : "subProjectName",
  "comments" : "comments",
  "workTaskId" : 7,
  "workTask" : "workTask",
  "roleId" : 3,
  "departmentId" : 5,
  "employeeId" : 6,
  "approvalStatusTypeId" : 4,
  "approvalLevelId" : 2,
  "reqDate" : "2000-01-23T04:56:07.000+00:00",
  "approvalGroupId" : 9,
  "pettyCashRequestId" : 1,
  "subProjectId" : 2,
  "jobRole" : "jobRole",
  "id" : 0,
  "projectName" : "projectName",
  "approvalStatusType" : "approvalStatusType",
  "projectId" : 5
}, {
  "departmentName" : "departmentName",
  "finalApprovedDate" : "2000-01-23T04:56:07.000+00:00",
  "employeeName" : "employeeName",
  "subProjectName" : "subProjectName",
  "comments" : "comments",
  "workTaskId" : 7,
  "workTask" : "workTask",
  "roleId" : 3,
  "departmentId" : 5,
  "employeeId" : 6,
  "approvalStatusTypeId" : 4,
  "approvalLevelId" : 2,
  "reqDate" : "2000-01-23T04:56:07.000+00:00",
  "approvalGroupId" : 9,
  "pettyCashRequestId" : 1,
  "subProjectId" : 2,
  "jobRole" : "jobRole",
  "id" : 0,
  "projectName" : "projectName",
  "approvalStatusType" : "approvalStatusType",
  "projectId" : 5
} ]}]
     - parameter _id: (path)  

     - returns: RequestBuilder<[ClaimApprovalStatusTrackerDTO]> 
     */
    open class func apiExpenseReimburseStatusTrackersApprovalsPendingForApproverIdGetWithRequestBuilder(_id: Int) -> RequestBuilder<[ExpenseReimburseStatusTrackerDTO]> {
        var path = "/api/ExpenseReimburseStatusTrackers/ApprovalsPendingForApprover/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[ExpenseReimburseStatusTrackerDTO]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiExpenseReimburseStatusTrackersCountOfApprovalsPendingForApproverIdGet(_id: Int, completion: @escaping ((_ data: Int?,_ error: Error?) -> Void)) {
        apiExpenseReimburseStatusTrackersCountOfApprovalsPendingForApproverIdGetWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /api/ExpenseReimburseStatusTrackers/CountOfApprovalsPendingForApprover/{id}
     - 

     - examples: [{contentType=application/json, example=0}]
     - parameter _id: (path)  

     - returns: RequestBuilder<Int> 
     */
    open class func apiExpenseReimburseStatusTrackersCountOfApprovalsPendingForApproverIdGetWithRequestBuilder(_id: Int) -> RequestBuilder<Int> {
        var path = "/api/ExpenseReimburseStatusTrackers/CountOfApprovalsPendingForApprover/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Int>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiExpenseReimburseStatusTrackersDeleteExpenseReimburseStatusTrackerIdDelete(_id: Int, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        apiExpenseReimburseStatusTrackersDeleteExpenseReimburseStatusTrackerIdDeleteWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /api/ExpenseReimburseStatusTrackers/DeleteExpenseReimburseStatusTracker/{id}
     - 

     - parameter _id: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func apiExpenseReimburseStatusTrackersDeleteExpenseReimburseStatusTrackerIdDeleteWithRequestBuilder(_id: Int) -> RequestBuilder<Void> {
        var path = "/api/ExpenseReimburseStatusTrackers/DeleteExpenseReimburseStatusTracker/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiExpenseReimburseStatusTrackersGetExpenseReimburseStatusTrackerIdGet(_id: Int, completion: @escaping ((_ data: ExpenseReimburseStatusTracker?,_ error: Error?) -> Void)) {
        apiExpenseReimburseStatusTrackersGetExpenseReimburseStatusTrackerIdGetWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /api/ExpenseReimburseStatusTrackers/GetExpenseReimburseStatusTracker/{id}
     - 

     - examples: [{contentType=application/json, example={
  "currencyType" : {
    "country" : "country",
    "currencyName" : "currencyName",
    "statusTypeId" : 1,
    "id" : 1,
    "currencyCode" : "currencyCode"
  },
  "expenseReimburseRequestId" : 1,
  "workTaskId" : 3,
  "departmentId" : 2,
  "totalClaimAmount" : 5.637376656633329,
  "project" : {
    "statusTypeId" : 3,
    "projectManagerId" : 6,
    "projectDesc" : "projectDesc",
    "id" : 8,
    "projectName" : "projectName",
    "costCentreId" : 9
  },
  "approvalStatusTypeId" : 1,
  "employee" : {
    "currencyType" : {
      "country" : "country",
      "currencyName" : "currencyName",
      "statusTypeId" : 1,
      "id" : 1,
      "currencyCode" : "currencyCode"
    },
    "lastName" : "lastName",
    "approvalGroup" : {
      "approvalGroupDesc" : "approvalGroupDesc",
      "approvalGroupCode" : "approvalGroupCode",
      "id" : 0
    },
    "role" : {
      "roleCode" : "roleCode",
      "roleName" : "roleName",
      "id" : 1,
      "maxPettyCashAllowed" : 5.962133916683182
    },
    "gender" : "gender",
    "mobileNumber" : "mobileNumber",
    "departmentId" : 4,
    "statusTypeId" : 7,
    "nationalID" : "nationalID",
    "id" : 6,
    "department" : {
      "deptName" : "deptName",
      "statusTypeId" : 2,
      "id" : 5,
      "costCentre" : {
        "costCentreCode" : "costCentreCode",
        "statusType" : {
          "id" : 7,
          "status" : "status"
        },
        "statusTypeId" : 9,
        "id" : 2,
        "costCentreDesc" : "costCentreDesc"
      },
      "deptCode" : "deptCode",
      "costCentreId" : 3
    },
    "email" : "",
    "bankAccount" : "bankAccount",
    "passportNo" : "passportNo",
    "bankCardNo" : "bankCardNo",
    "employmentType" : {
      "empJobTypeCode" : "empJobTypeCode",
      "id" : 1,
      "empJobTypeDesc" : "empJobTypeDesc"
    },
    "roleId" : 7,
    "taxNumber" : "taxNumber",
    "currencyTypeId" : 6,
    "firstName" : "firstName",
    "nationality" : "nationality",
    "empCode" : "empCode",
    "employmentTypeId" : 5,
    "dob" : "2000-01-23T04:56:07.000+00:00",
    "approvalGroupId" : 1,
    "middleName" : "middleName",
    "doj" : "2000-01-23T04:56:07.000+00:00"
  },
  "approvalLevelId" : 7,
  "jobRole" : {
    "roleCode" : "roleCode",
    "roleName" : "roleName",
    "id" : 1,
    "maxPettyCashAllowed" : 5.962133916683182
  },
  "jobRoleId" : 4,
  "id" : 0,
  "department" : {
    "deptName" : "deptName",
    "statusTypeId" : 2,
    "id" : 5,
    "costCentre" : {
      "costCentreCode" : "costCentreCode",
      "statusType" : {
        "id" : 7,
        "status" : "status"
      },
      "statusTypeId" : 9,
      "id" : 2,
      "costCentreDesc" : "costCentreDesc"
    },
    "deptCode" : "deptCode",
    "costCentreId" : 3
  },
  "expenseReimburseRequest" : {
    "currencyType" : {
      "country" : "country",
      "currencyName" : "currencyName",
      "statusTypeId" : 1,
      "id" : 1,
      "currencyCode" : "currencyCode"
    },
    "workTask" : {
      "taskDesc" : "taskDesc",
      "subProjectId" : 5,
      "taskName" : "taskName",
      "id" : 6
    },
    "workTaskId" : 4,
    "departmentId" : 9,
    "totalClaimAmount" : 7.061401241503109,
    "project" : {
      "statusTypeId" : 3,
      "projectManagerId" : 6,
      "projectDesc" : "projectDesc",
      "id" : 8,
      "projectName" : "projectName",
      "costCentreId" : 9
    },
    "expenseReportTitle" : "expenseReportTitle",
    "employeeId" : 5,
    "approvalStatusTypeId" : 7,
    "currencyTypeId" : 2,
    "approvedDate" : "2000-01-23T04:56:07.000+00:00",
    "subProjectId" : 2,
    "expReimReqDate" : "2000-01-23T04:56:07.000+00:00",
    "subProject" : {
      "subProjectName" : "subProjectName",
      "subProjectDesc" : "subProjectDesc",
      "id" : 1,
      "projectId" : 2
    },
    "id" : 5,
    "department" : {
      "deptName" : "deptName",
      "statusTypeId" : 2,
      "id" : 5,
      "costCentre" : {
        "costCentreCode" : "costCentreCode",
        "statusType" : {
          "id" : 7,
          "status" : "status"
        },
        "statusTypeId" : 9,
        "id" : 2,
        "costCentreDesc" : "costCentreDesc"
      },
      "deptCode" : "deptCode",
      "costCentreId" : 3
    },
    "approvalStatusType" : {
      "statusDesc" : "statusDesc",
      "id" : 0,
      "status" : "status"
    },
    "projectId" : 3
  },
  "comments" : "comments",
  "workTask" : {
    "taskDesc" : "taskDesc",
    "subProjectId" : 5,
    "taskName" : "taskName",
    "id" : 6
  },
  "employeeId" : 6,
  "currencyTypeId" : 5,
  "approvedDate" : "2000-01-23T04:56:07.000+00:00",
  "approvalGroupId" : 2,
  "subProjectId" : 9,
  "expReimReqDate" : "2000-01-23T04:56:07.000+00:00",
  "subProject" : {
    "subProjectName" : "subProjectName",
    "subProjectDesc" : "subProjectDesc",
    "id" : 1,
    "projectId" : 2
  },
  "approvalLevel" : {
    "level" : 6,
    "levelDesc" : "levelDesc",
    "id" : 0
  },
  "approvalStatusType" : {
    "statusDesc" : "statusDesc",
    "id" : 0,
    "status" : "status"
  },
  "projectId" : 7
}}]
     - parameter _id: (path)  

     - returns: RequestBuilder<ExpenseReimburseStatusTracker> 
     */
    open class func apiExpenseReimburseStatusTrackersGetExpenseReimburseStatusTrackerIdGetWithRequestBuilder(_id: Int) -> RequestBuilder<ExpenseReimburseStatusTracker> {
        var path = "/api/ExpenseReimburseStatusTrackers/GetExpenseReimburseStatusTracker/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ExpenseReimburseStatusTracker>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiExpenseReimburseStatusTrackersGetExpenseReimburseStatusTrackersGet(completion: @escaping ((_ data: [ExpenseReimburseStatusTracker]?,_ error: Error?) -> Void)) {
        apiExpenseReimburseStatusTrackersGetExpenseReimburseStatusTrackersGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /api/ExpenseReimburseStatusTrackers/GetExpenseReimburseStatusTrackers
     - 

     - examples: [{contentType=application/json, example=[ {
  "currencyType" : {
    "country" : "country",
    "currencyName" : "currencyName",
    "statusTypeId" : 1,
    "id" : 1,
    "currencyCode" : "currencyCode"
  },
  "expenseReimburseRequestId" : 1,
  "workTaskId" : 3,
  "departmentId" : 2,
  "totalClaimAmount" : 5.637376656633329,
  "project" : {
    "statusTypeId" : 3,
    "projectManagerId" : 6,
    "projectDesc" : "projectDesc",
    "id" : 8,
    "projectName" : "projectName",
    "costCentreId" : 9
  },
  "approvalStatusTypeId" : 1,
  "employee" : {
    "currencyType" : {
      "country" : "country",
      "currencyName" : "currencyName",
      "statusTypeId" : 1,
      "id" : 1,
      "currencyCode" : "currencyCode"
    },
    "lastName" : "lastName",
    "approvalGroup" : {
      "approvalGroupDesc" : "approvalGroupDesc",
      "approvalGroupCode" : "approvalGroupCode",
      "id" : 0
    },
    "role" : {
      "roleCode" : "roleCode",
      "roleName" : "roleName",
      "id" : 1,
      "maxPettyCashAllowed" : 5.962133916683182
    },
    "gender" : "gender",
    "mobileNumber" : "mobileNumber",
    "departmentId" : 4,
    "statusTypeId" : 7,
    "nationalID" : "nationalID",
    "id" : 6,
    "department" : {
      "deptName" : "deptName",
      "statusTypeId" : 2,
      "id" : 5,
      "costCentre" : {
        "costCentreCode" : "costCentreCode",
        "statusType" : {
          "id" : 7,
          "status" : "status"
        },
        "statusTypeId" : 9,
        "id" : 2,
        "costCentreDesc" : "costCentreDesc"
      },
      "deptCode" : "deptCode",
      "costCentreId" : 3
    },
    "email" : "",
    "bankAccount" : "bankAccount",
    "passportNo" : "passportNo",
    "bankCardNo" : "bankCardNo",
    "employmentType" : {
      "empJobTypeCode" : "empJobTypeCode",
      "id" : 1,
      "empJobTypeDesc" : "empJobTypeDesc"
    },
    "roleId" : 7,
    "taxNumber" : "taxNumber",
    "currencyTypeId" : 6,
    "firstName" : "firstName",
    "nationality" : "nationality",
    "empCode" : "empCode",
    "employmentTypeId" : 5,
    "dob" : "2000-01-23T04:56:07.000+00:00",
    "approvalGroupId" : 1,
    "middleName" : "middleName",
    "doj" : "2000-01-23T04:56:07.000+00:00"
  },
  "approvalLevelId" : 7,
  "jobRole" : {
    "roleCode" : "roleCode",
    "roleName" : "roleName",
    "id" : 1,
    "maxPettyCashAllowed" : 5.962133916683182
  },
  "jobRoleId" : 4,
  "id" : 0,
  "department" : {
    "deptName" : "deptName",
    "statusTypeId" : 2,
    "id" : 5,
    "costCentre" : {
      "costCentreCode" : "costCentreCode",
      "statusType" : {
        "id" : 7,
        "status" : "status"
      },
      "statusTypeId" : 9,
      "id" : 2,
      "costCentreDesc" : "costCentreDesc"
    },
    "deptCode" : "deptCode",
    "costCentreId" : 3
  },
  "expenseReimburseRequest" : {
    "currencyType" : {
      "country" : "country",
      "currencyName" : "currencyName",
      "statusTypeId" : 1,
      "id" : 1,
      "currencyCode" : "currencyCode"
    },
    "workTask" : {
      "taskDesc" : "taskDesc",
      "subProjectId" : 5,
      "taskName" : "taskName",
      "id" : 6
    },
    "workTaskId" : 4,
    "departmentId" : 9,
    "totalClaimAmount" : 7.061401241503109,
    "project" : {
      "statusTypeId" : 3,
      "projectManagerId" : 6,
      "projectDesc" : "projectDesc",
      "id" : 8,
      "projectName" : "projectName",
      "costCentreId" : 9
    },
    "expenseReportTitle" : "expenseReportTitle",
    "employeeId" : 5,
    "approvalStatusTypeId" : 7,
    "currencyTypeId" : 2,
    "approvedDate" : "2000-01-23T04:56:07.000+00:00",
    "subProjectId" : 2,
    "expReimReqDate" : "2000-01-23T04:56:07.000+00:00",
    "subProject" : {
      "subProjectName" : "subProjectName",
      "subProjectDesc" : "subProjectDesc",
      "id" : 1,
      "projectId" : 2
    },
    "id" : 5,
    "department" : {
      "deptName" : "deptName",
      "statusTypeId" : 2,
      "id" : 5,
      "costCentre" : {
        "costCentreCode" : "costCentreCode",
        "statusType" : {
          "id" : 7,
          "status" : "status"
        },
        "statusTypeId" : 9,
        "id" : 2,
        "costCentreDesc" : "costCentreDesc"
      },
      "deptCode" : "deptCode",
      "costCentreId" : 3
    },
    "approvalStatusType" : {
      "statusDesc" : "statusDesc",
      "id" : 0,
      "status" : "status"
    },
    "projectId" : 3
  },
  "comments" : "comments",
  "workTask" : {
    "taskDesc" : "taskDesc",
    "subProjectId" : 5,
    "taskName" : "taskName",
    "id" : 6
  },
  "employeeId" : 6,
  "currencyTypeId" : 5,
  "approvedDate" : "2000-01-23T04:56:07.000+00:00",
  "approvalGroupId" : 2,
  "subProjectId" : 9,
  "expReimReqDate" : "2000-01-23T04:56:07.000+00:00",
  "subProject" : {
    "subProjectName" : "subProjectName",
    "subProjectDesc" : "subProjectDesc",
    "id" : 1,
    "projectId" : 2
  },
  "approvalLevel" : {
    "level" : 6,
    "levelDesc" : "levelDesc",
    "id" : 0
  },
  "approvalStatusType" : {
    "statusDesc" : "statusDesc",
    "id" : 0,
    "status" : "status"
  },
  "projectId" : 7
}, {
  "currencyType" : {
    "country" : "country",
    "currencyName" : "currencyName",
    "statusTypeId" : 1,
    "id" : 1,
    "currencyCode" : "currencyCode"
  },
  "expenseReimburseRequestId" : 1,
  "workTaskId" : 3,
  "departmentId" : 2,
  "totalClaimAmount" : 5.637376656633329,
  "project" : {
    "statusTypeId" : 3,
    "projectManagerId" : 6,
    "projectDesc" : "projectDesc",
    "id" : 8,
    "projectName" : "projectName",
    "costCentreId" : 9
  },
  "approvalStatusTypeId" : 1,
  "employee" : {
    "currencyType" : {
      "country" : "country",
      "currencyName" : "currencyName",
      "statusTypeId" : 1,
      "id" : 1,
      "currencyCode" : "currencyCode"
    },
    "lastName" : "lastName",
    "approvalGroup" : {
      "approvalGroupDesc" : "approvalGroupDesc",
      "approvalGroupCode" : "approvalGroupCode",
      "id" : 0
    },
    "role" : {
      "roleCode" : "roleCode",
      "roleName" : "roleName",
      "id" : 1,
      "maxPettyCashAllowed" : 5.962133916683182
    },
    "gender" : "gender",
    "mobileNumber" : "mobileNumber",
    "departmentId" : 4,
    "statusTypeId" : 7,
    "nationalID" : "nationalID",
    "id" : 6,
    "department" : {
      "deptName" : "deptName",
      "statusTypeId" : 2,
      "id" : 5,
      "costCentre" : {
        "costCentreCode" : "costCentreCode",
        "statusType" : {
          "id" : 7,
          "status" : "status"
        },
        "statusTypeId" : 9,
        "id" : 2,
        "costCentreDesc" : "costCentreDesc"
      },
      "deptCode" : "deptCode",
      "costCentreId" : 3
    },
    "email" : "",
    "bankAccount" : "bankAccount",
    "passportNo" : "passportNo",
    "bankCardNo" : "bankCardNo",
    "employmentType" : {
      "empJobTypeCode" : "empJobTypeCode",
      "id" : 1,
      "empJobTypeDesc" : "empJobTypeDesc"
    },
    "roleId" : 7,
    "taxNumber" : "taxNumber",
    "currencyTypeId" : 6,
    "firstName" : "firstName",
    "nationality" : "nationality",
    "empCode" : "empCode",
    "employmentTypeId" : 5,
    "dob" : "2000-01-23T04:56:07.000+00:00",
    "approvalGroupId" : 1,
    "middleName" : "middleName",
    "doj" : "2000-01-23T04:56:07.000+00:00"
  },
  "approvalLevelId" : 7,
  "jobRole" : {
    "roleCode" : "roleCode",
    "roleName" : "roleName",
    "id" : 1,
    "maxPettyCashAllowed" : 5.962133916683182
  },
  "jobRoleId" : 4,
  "id" : 0,
  "department" : {
    "deptName" : "deptName",
    "statusTypeId" : 2,
    "id" : 5,
    "costCentre" : {
      "costCentreCode" : "costCentreCode",
      "statusType" : {
        "id" : 7,
        "status" : "status"
      },
      "statusTypeId" : 9,
      "id" : 2,
      "costCentreDesc" : "costCentreDesc"
    },
    "deptCode" : "deptCode",
    "costCentreId" : 3
  },
  "expenseReimburseRequest" : {
    "currencyType" : {
      "country" : "country",
      "currencyName" : "currencyName",
      "statusTypeId" : 1,
      "id" : 1,
      "currencyCode" : "currencyCode"
    },
    "workTask" : {
      "taskDesc" : "taskDesc",
      "subProjectId" : 5,
      "taskName" : "taskName",
      "id" : 6
    },
    "workTaskId" : 4,
    "departmentId" : 9,
    "totalClaimAmount" : 7.061401241503109,
    "project" : {
      "statusTypeId" : 3,
      "projectManagerId" : 6,
      "projectDesc" : "projectDesc",
      "id" : 8,
      "projectName" : "projectName",
      "costCentreId" : 9
    },
    "expenseReportTitle" : "expenseReportTitle",
    "employeeId" : 5,
    "approvalStatusTypeId" : 7,
    "currencyTypeId" : 2,
    "approvedDate" : "2000-01-23T04:56:07.000+00:00",
    "subProjectId" : 2,
    "expReimReqDate" : "2000-01-23T04:56:07.000+00:00",
    "subProject" : {
      "subProjectName" : "subProjectName",
      "subProjectDesc" : "subProjectDesc",
      "id" : 1,
      "projectId" : 2
    },
    "id" : 5,
    "department" : {
      "deptName" : "deptName",
      "statusTypeId" : 2,
      "id" : 5,
      "costCentre" : {
        "costCentreCode" : "costCentreCode",
        "statusType" : {
          "id" : 7,
          "status" : "status"
        },
        "statusTypeId" : 9,
        "id" : 2,
        "costCentreDesc" : "costCentreDesc"
      },
      "deptCode" : "deptCode",
      "costCentreId" : 3
    },
    "approvalStatusType" : {
      "statusDesc" : "statusDesc",
      "id" : 0,
      "status" : "status"
    },
    "projectId" : 3
  },
  "comments" : "comments",
  "workTask" : {
    "taskDesc" : "taskDesc",
    "subProjectId" : 5,
    "taskName" : "taskName",
    "id" : 6
  },
  "employeeId" : 6,
  "currencyTypeId" : 5,
  "approvedDate" : "2000-01-23T04:56:07.000+00:00",
  "approvalGroupId" : 2,
  "subProjectId" : 9,
  "expReimReqDate" : "2000-01-23T04:56:07.000+00:00",
  "subProject" : {
    "subProjectName" : "subProjectName",
    "subProjectDesc" : "subProjectDesc",
    "id" : 1,
    "projectId" : 2
  },
  "approvalLevel" : {
    "level" : 6,
    "levelDesc" : "levelDesc",
    "id" : 0
  },
  "approvalStatusType" : {
    "statusDesc" : "statusDesc",
    "id" : 0,
    "status" : "status"
  },
  "projectId" : 7
} ]}]

     - returns: RequestBuilder<[ExpenseReimburseStatusTracker]> 
     */
    open class func apiExpenseReimburseStatusTrackersGetExpenseReimburseStatusTrackersGetWithRequestBuilder() -> RequestBuilder<[ExpenseReimburseStatusTracker]> {
        let path = "/api/ExpenseReimburseStatusTrackers/GetExpenseReimburseStatusTrackers"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[ExpenseReimburseStatusTracker]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiExpenseReimburseStatusTrackersPostExpenseReimburseStatusTrackerPost(body: ExpenseReimburseStatusTracker? = nil, completion: @escaping ((_ data: ExpenseReimburseStatusTracker?,_ error: Error?) -> Void)) {
        apiExpenseReimburseStatusTrackersPostExpenseReimburseStatusTrackerPostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /api/ExpenseReimburseStatusTrackers/PostExpenseReimburseStatusTracker
     - 

     - examples: [{contentType=application/json, example={
  "currencyType" : {
    "country" : "country",
    "currencyName" : "currencyName",
    "statusTypeId" : 1,
    "id" : 1,
    "currencyCode" : "currencyCode"
  },
  "expenseReimburseRequestId" : 1,
  "workTaskId" : 3,
  "departmentId" : 2,
  "totalClaimAmount" : 5.637376656633329,
  "project" : {
    "statusTypeId" : 3,
    "projectManagerId" : 6,
    "projectDesc" : "projectDesc",
    "id" : 8,
    "projectName" : "projectName",
    "costCentreId" : 9
  },
  "approvalStatusTypeId" : 1,
  "employee" : {
    "currencyType" : {
      "country" : "country",
      "currencyName" : "currencyName",
      "statusTypeId" : 1,
      "id" : 1,
      "currencyCode" : "currencyCode"
    },
    "lastName" : "lastName",
    "approvalGroup" : {
      "approvalGroupDesc" : "approvalGroupDesc",
      "approvalGroupCode" : "approvalGroupCode",
      "id" : 0
    },
    "role" : {
      "roleCode" : "roleCode",
      "roleName" : "roleName",
      "id" : 1,
      "maxPettyCashAllowed" : 5.962133916683182
    },
    "gender" : "gender",
    "mobileNumber" : "mobileNumber",
    "departmentId" : 4,
    "statusTypeId" : 7,
    "nationalID" : "nationalID",
    "id" : 6,
    "department" : {
      "deptName" : "deptName",
      "statusTypeId" : 2,
      "id" : 5,
      "costCentre" : {
        "costCentreCode" : "costCentreCode",
        "statusType" : {
          "id" : 7,
          "status" : "status"
        },
        "statusTypeId" : 9,
        "id" : 2,
        "costCentreDesc" : "costCentreDesc"
      },
      "deptCode" : "deptCode",
      "costCentreId" : 3
    },
    "email" : "",
    "bankAccount" : "bankAccount",
    "passportNo" : "passportNo",
    "bankCardNo" : "bankCardNo",
    "employmentType" : {
      "empJobTypeCode" : "empJobTypeCode",
      "id" : 1,
      "empJobTypeDesc" : "empJobTypeDesc"
    },
    "roleId" : 7,
    "taxNumber" : "taxNumber",
    "currencyTypeId" : 6,
    "firstName" : "firstName",
    "nationality" : "nationality",
    "empCode" : "empCode",
    "employmentTypeId" : 5,
    "dob" : "2000-01-23T04:56:07.000+00:00",
    "approvalGroupId" : 1,
    "middleName" : "middleName",
    "doj" : "2000-01-23T04:56:07.000+00:00"
  },
  "approvalLevelId" : 7,
  "jobRole" : {
    "roleCode" : "roleCode",
    "roleName" : "roleName",
    "id" : 1,
    "maxPettyCashAllowed" : 5.962133916683182
  },
  "jobRoleId" : 4,
  "id" : 0,
  "department" : {
    "deptName" : "deptName",
    "statusTypeId" : 2,
    "id" : 5,
    "costCentre" : {
      "costCentreCode" : "costCentreCode",
      "statusType" : {
        "id" : 7,
        "status" : "status"
      },
      "statusTypeId" : 9,
      "id" : 2,
      "costCentreDesc" : "costCentreDesc"
    },
    "deptCode" : "deptCode",
    "costCentreId" : 3
  },
  "expenseReimburseRequest" : {
    "currencyType" : {
      "country" : "country",
      "currencyName" : "currencyName",
      "statusTypeId" : 1,
      "id" : 1,
      "currencyCode" : "currencyCode"
    },
    "workTask" : {
      "taskDesc" : "taskDesc",
      "subProjectId" : 5,
      "taskName" : "taskName",
      "id" : 6
    },
    "workTaskId" : 4,
    "departmentId" : 9,
    "totalClaimAmount" : 7.061401241503109,
    "project" : {
      "statusTypeId" : 3,
      "projectManagerId" : 6,
      "projectDesc" : "projectDesc",
      "id" : 8,
      "projectName" : "projectName",
      "costCentreId" : 9
    },
    "expenseReportTitle" : "expenseReportTitle",
    "employeeId" : 5,
    "approvalStatusTypeId" : 7,
    "currencyTypeId" : 2,
    "approvedDate" : "2000-01-23T04:56:07.000+00:00",
    "subProjectId" : 2,
    "expReimReqDate" : "2000-01-23T04:56:07.000+00:00",
    "subProject" : {
      "subProjectName" : "subProjectName",
      "subProjectDesc" : "subProjectDesc",
      "id" : 1,
      "projectId" : 2
    },
    "id" : 5,
    "department" : {
      "deptName" : "deptName",
      "statusTypeId" : 2,
      "id" : 5,
      "costCentre" : {
        "costCentreCode" : "costCentreCode",
        "statusType" : {
          "id" : 7,
          "status" : "status"
        },
        "statusTypeId" : 9,
        "id" : 2,
        "costCentreDesc" : "costCentreDesc"
      },
      "deptCode" : "deptCode",
      "costCentreId" : 3
    },
    "approvalStatusType" : {
      "statusDesc" : "statusDesc",
      "id" : 0,
      "status" : "status"
    },
    "projectId" : 3
  },
  "comments" : "comments",
  "workTask" : {
    "taskDesc" : "taskDesc",
    "subProjectId" : 5,
    "taskName" : "taskName",
    "id" : 6
  },
  "employeeId" : 6,
  "currencyTypeId" : 5,
  "approvedDate" : "2000-01-23T04:56:07.000+00:00",
  "approvalGroupId" : 2,
  "subProjectId" : 9,
  "expReimReqDate" : "2000-01-23T04:56:07.000+00:00",
  "subProject" : {
    "subProjectName" : "subProjectName",
    "subProjectDesc" : "subProjectDesc",
    "id" : 1,
    "projectId" : 2
  },
  "approvalLevel" : {
    "level" : 6,
    "levelDesc" : "levelDesc",
    "id" : 0
  },
  "approvalStatusType" : {
    "statusDesc" : "statusDesc",
    "id" : 0,
    "status" : "status"
  },
  "projectId" : 7
}}]
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<ExpenseReimburseStatusTracker> 
     */
    open class func apiExpenseReimburseStatusTrackersPostExpenseReimburseStatusTrackerPostWithRequestBuilder(body: ExpenseReimburseStatusTracker? = nil) -> RequestBuilder<ExpenseReimburseStatusTracker> {
        let path = "/api/ExpenseReimburseStatusTrackers/PostExpenseReimburseStatusTracker"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ExpenseReimburseStatusTracker>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiExpenseReimburseStatusTrackersPutExpenseReimburseStatusTrackerPut(body: [ExpenseReimburseStatusTrackerDTO]? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        apiExpenseReimburseStatusTrackersPutExpenseReimburseStatusTrackerPutWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - PUT /api/ExpenseReimburseStatusTrackers/PutExpenseReimburseStatusTracker
     - 

     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func apiExpenseReimburseStatusTrackersPutExpenseReimburseStatusTrackerPutWithRequestBuilder(body: [ExpenseReimburseStatusTrackerDTO]? = nil) -> RequestBuilder<Void> {
        let path = "/api/ExpenseReimburseStatusTrackers/PutExpenseReimburseStatusTracker"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
