//
// ExpenseReimburseRequestsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class ExpenseReimburseRequestsAPI {
    /**

     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiExpenseReimburseRequestsCountAllExpenseReimburseRequestRaisedByEmployeeIdGet(_id: Int, completion: @escaping ((_ data: RequestCountModel?,_ error: Error?) -> Void)) {
        apiExpenseReimburseRequestsCountAllExpenseReimburseRequestRaisedByEmployeeIdGetWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((response?.body), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /api/ExpenseReimburseRequests/CountAllExpenseReimburseRequestRaisedByEmployee/{id}
     - 

     - parameter _id: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func apiExpenseReimburseRequestsCountAllExpenseReimburseRequestRaisedByEmployeeIdGetWithRequestBuilder(_id: Int) -> RequestBuilder<RequestCountModel> {
        var path = "/api/ExpenseReimburseRequests/CountAllExpenseReimburseRequestRaisedByEmployee/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<RequestCountModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiExpenseReimburseRequestsDeleteExpenseReimburseRequestIdDelete(_id: Int, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        apiExpenseReimburseRequestsDeleteExpenseReimburseRequestIdDeleteWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /api/ExpenseReimburseRequests/DeleteExpenseReimburseRequest/{id}
     - 

     - parameter _id: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func apiExpenseReimburseRequestsDeleteExpenseReimburseRequestIdDeleteWithRequestBuilder(_id: Int) -> RequestBuilder<Void> {
        var path = "/api/ExpenseReimburseRequests/DeleteExpenseReimburseRequest/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiExpenseReimburseRequestsGetDocumentByDocIdIdGet(_id: Int, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        apiExpenseReimburseRequestsGetDocumentByDocIdIdGetWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /api/ExpenseReimburseRequests/GetDocumentByDocId/{id}
     - 

     - parameter _id: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func apiExpenseReimburseRequestsGetDocumentByDocIdIdGetWithRequestBuilder(_id: Int) -> RequestBuilder<Void> {
        var path = "/api/ExpenseReimburseRequests/GetDocumentByDocId/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiExpenseReimburseRequestsGetDocumentsBySubClaimsIdIdGet(_id: Int, completion: @escaping ((_ data: [String]?,_ error: Error?) -> Void)) {
        apiExpenseReimburseRequestsGetDocumentsBySubClaimsIdIdGetWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((response?.body), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /api/ExpenseReimburseRequests/GetDocumentsBySubClaimsId/{id}
     - 

     - parameter _id: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func apiExpenseReimburseRequestsGetDocumentsBySubClaimsIdIdGetWithRequestBuilder(_id: Int) -> RequestBuilder<[String]> {
        var path = "/api/ExpenseReimburseRequests/GetDocumentsBySubClaimsId/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[String]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiExpenseReimburseRequestsGetExpenseReimburseRequestIdGet(_id: Int, completion: @escaping ((_ data: ExpenseReimburseRequestDTO?,_ error: Error?) -> Void)) {
        apiExpenseReimburseRequestsGetExpenseReimburseRequestIdGetWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /api/ExpenseReimburseRequests/GetExpenseReimburseRequest/{id}
     - 

     - examples: [{contentType=application/json, example={
  "showEditDelete" : true,
  "employeeName" : "employeeName",
  "comments" : "comments",
  "expenseSubClaims" : [ {
    "currencyType" : "currencyType",
    "workTaskId" : 5,
    "departmentId" : 7,
    "description" : "description",
    "project" : "project",
    "approvalStatusTypeId" : 9,
    "documentIDs" : "documentIDs",
    "vendor" : "vendor",
    "id" : 2,
    "invoiceNo" : "invoiceNo",
    "department" : "department",
    "expenseReimbClaimAmount" : 7.386281948385884,
    "employeeName" : "employeeName",
    "expenseType" : "expenseType",
    "workTask" : "workTask",
    "employeeId" : 4,
    "tax" : 1.2315135,
    "invoiceDate" : "2000-01-23T04:56:07.000+00:00",
    "currencyTypeId" : 1,
    "approvedDate" : "2000-01-23T04:56:07.000+00:00",
    "subProjectId" : 4,
    "expReimReqDate" : "2000-01-23T04:56:07.000+00:00",
    "subProject" : "subProject",
    "location" : "location",
    "expenseTypeId" : 6,
    "taxAmount" : 1.0246457001441578,
    "approvalStatusType" : "approvalStatusType",
    "projectId" : 1
  }, {
    "currencyType" : "currencyType",
    "workTaskId" : 5,
    "departmentId" : 7,
    "description" : "description",
    "project" : "project",
    "approvalStatusTypeId" : 9,
    "documentIDs" : "documentIDs",
    "vendor" : "vendor",
    "id" : 2,
    "invoiceNo" : "invoiceNo",
    "department" : "department",
    "expenseReimbClaimAmount" : 7.386281948385884,
    "employeeName" : "employeeName",
    "expenseType" : "expenseType",
    "workTask" : "workTask",
    "employeeId" : 4,
    "tax" : 1.2315135,
    "invoiceDate" : "2000-01-23T04:56:07.000+00:00",
    "currencyTypeId" : 1,
    "approvedDate" : "2000-01-23T04:56:07.000+00:00",
    "subProjectId" : 4,
    "expReimReqDate" : "2000-01-23T04:56:07.000+00:00",
    "subProject" : "subProject",
    "location" : "location",
    "expenseTypeId" : 6,
    "taxAmount" : 1.0246457001441578,
    "approvalStatusType" : "approvalStatusType",
    "projectId" : 1
  } ],
  "workTask" : "workTask",
  "workTaskId" : 9,
  "departmentId" : 5,
  "totalClaimAmount" : 5.962133916683182,
  "project" : "project",
  "expenseReportTitle" : "expenseReportTitle",
  "employeeId" : 6,
  "approvalStatusTypeId" : 3,
  "currencyTypeId" : 1,
  "approvedDate" : "2000-01-23T04:56:07.000+00:00",
  "subProjectId" : 7,
  "expReimReqDate" : "2000-01-23T04:56:07.000+00:00",
  "subProject" : "subProject",
  "id" : 0,
  "department" : "department",
  "approvalStatusType" : "approvalStatusType",
  "projectId" : 2
}}]
     - parameter _id: (path)  

     - returns: RequestBuilder<ExpenseReimburseRequestDTO> 
     */
    open class func apiExpenseReimburseRequestsGetExpenseReimburseRequestIdGetWithRequestBuilder(_id: Int) -> RequestBuilder<ExpenseReimburseRequestDTO> {
        var path = "/api/ExpenseReimburseRequests/GetExpenseReimburseRequest/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ExpenseReimburseRequestDTO>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiExpenseReimburseRequestsGetExpenseReimburseRequestRaisedForEmployeeIdGet(_id: Int, completion: @escaping ((_ data: [ExpenseReimburseRequestDTO]?,_ error: Error?) -> Void)) {
        apiExpenseReimburseRequestsGetExpenseReimburseRequestRaisedForEmployeeIdGetWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /api/ExpenseReimburseRequests/GetExpenseReimburseRequestRaisedForEmployee/{id}
     - 

     - examples: [{contentType=application/json, example=[ {
  "showEditDelete" : true,
  "employeeName" : "employeeName",
  "comments" : "comments",
  "expenseSubClaims" : [ {
    "currencyType" : "currencyType",
    "workTaskId" : 5,
    "departmentId" : 7,
    "description" : "description",
    "project" : "project",
    "approvalStatusTypeId" : 9,
    "documentIDs" : "documentIDs",
    "vendor" : "vendor",
    "id" : 2,
    "invoiceNo" : "invoiceNo",
    "department" : "department",
    "expenseReimbClaimAmount" : 7.386281948385884,
    "employeeName" : "employeeName",
    "expenseType" : "expenseType",
    "workTask" : "workTask",
    "employeeId" : 4,
    "tax" : 1.2315135,
    "invoiceDate" : "2000-01-23T04:56:07.000+00:00",
    "currencyTypeId" : 1,
    "approvedDate" : "2000-01-23T04:56:07.000+00:00",
    "subProjectId" : 4,
    "expReimReqDate" : "2000-01-23T04:56:07.000+00:00",
    "subProject" : "subProject",
    "location" : "location",
    "expenseTypeId" : 6,
    "taxAmount" : 1.0246457001441578,
    "approvalStatusType" : "approvalStatusType",
    "projectId" : 1
  }, {
    "currencyType" : "currencyType",
    "workTaskId" : 5,
    "departmentId" : 7,
    "description" : "description",
    "project" : "project",
    "approvalStatusTypeId" : 9,
    "documentIDs" : "documentIDs",
    "vendor" : "vendor",
    "id" : 2,
    "invoiceNo" : "invoiceNo",
    "department" : "department",
    "expenseReimbClaimAmount" : 7.386281948385884,
    "employeeName" : "employeeName",
    "expenseType" : "expenseType",
    "workTask" : "workTask",
    "employeeId" : 4,
    "tax" : 1.2315135,
    "invoiceDate" : "2000-01-23T04:56:07.000+00:00",
    "currencyTypeId" : 1,
    "approvedDate" : "2000-01-23T04:56:07.000+00:00",
    "subProjectId" : 4,
    "expReimReqDate" : "2000-01-23T04:56:07.000+00:00",
    "subProject" : "subProject",
    "location" : "location",
    "expenseTypeId" : 6,
    "taxAmount" : 1.0246457001441578,
    "approvalStatusType" : "approvalStatusType",
    "projectId" : 1
  } ],
  "workTask" : "workTask",
  "workTaskId" : 9,
  "departmentId" : 5,
  "totalClaimAmount" : 5.962133916683182,
  "project" : "project",
  "expenseReportTitle" : "expenseReportTitle",
  "employeeId" : 6,
  "approvalStatusTypeId" : 3,
  "currencyTypeId" : 1,
  "approvedDate" : "2000-01-23T04:56:07.000+00:00",
  "subProjectId" : 7,
  "expReimReqDate" : "2000-01-23T04:56:07.000+00:00",
  "subProject" : "subProject",
  "id" : 0,
  "department" : "department",
  "approvalStatusType" : "approvalStatusType",
  "projectId" : 2
}, {
  "showEditDelete" : true,
  "employeeName" : "employeeName",
  "comments" : "comments",
  "expenseSubClaims" : [ {
    "currencyType" : "currencyType",
    "workTaskId" : 5,
    "departmentId" : 7,
    "description" : "description",
    "project" : "project",
    "approvalStatusTypeId" : 9,
    "documentIDs" : "documentIDs",
    "vendor" : "vendor",
    "id" : 2,
    "invoiceNo" : "invoiceNo",
    "department" : "department",
    "expenseReimbClaimAmount" : 7.386281948385884,
    "employeeName" : "employeeName",
    "expenseType" : "expenseType",
    "workTask" : "workTask",
    "employeeId" : 4,
    "tax" : 1.2315135,
    "invoiceDate" : "2000-01-23T04:56:07.000+00:00",
    "currencyTypeId" : 1,
    "approvedDate" : "2000-01-23T04:56:07.000+00:00",
    "subProjectId" : 4,
    "expReimReqDate" : "2000-01-23T04:56:07.000+00:00",
    "subProject" : "subProject",
    "location" : "location",
    "expenseTypeId" : 6,
    "taxAmount" : 1.0246457001441578,
    "approvalStatusType" : "approvalStatusType",
    "projectId" : 1
  }, {
    "currencyType" : "currencyType",
    "workTaskId" : 5,
    "departmentId" : 7,
    "description" : "description",
    "project" : "project",
    "approvalStatusTypeId" : 9,
    "documentIDs" : "documentIDs",
    "vendor" : "vendor",
    "id" : 2,
    "invoiceNo" : "invoiceNo",
    "department" : "department",
    "expenseReimbClaimAmount" : 7.386281948385884,
    "employeeName" : "employeeName",
    "expenseType" : "expenseType",
    "workTask" : "workTask",
    "employeeId" : 4,
    "tax" : 1.2315135,
    "invoiceDate" : "2000-01-23T04:56:07.000+00:00",
    "currencyTypeId" : 1,
    "approvedDate" : "2000-01-23T04:56:07.000+00:00",
    "subProjectId" : 4,
    "expReimReqDate" : "2000-01-23T04:56:07.000+00:00",
    "subProject" : "subProject",
    "location" : "location",
    "expenseTypeId" : 6,
    "taxAmount" : 1.0246457001441578,
    "approvalStatusType" : "approvalStatusType",
    "projectId" : 1
  } ],
  "workTask" : "workTask",
  "workTaskId" : 9,
  "departmentId" : 5,
  "totalClaimAmount" : 5.962133916683182,
  "project" : "project",
  "expenseReportTitle" : "expenseReportTitle",
  "employeeId" : 6,
  "approvalStatusTypeId" : 3,
  "currencyTypeId" : 1,
  "approvedDate" : "2000-01-23T04:56:07.000+00:00",
  "subProjectId" : 7,
  "expReimReqDate" : "2000-01-23T04:56:07.000+00:00",
  "subProject" : "subProject",
  "id" : 0,
  "department" : "department",
  "approvalStatusType" : "approvalStatusType",
  "projectId" : 2
} ]}]
     - parameter _id: (path)  

     - returns: RequestBuilder<[ExpenseReimburseRequestDTO]> 
     */
    open class func apiExpenseReimburseRequestsGetExpenseReimburseRequestRaisedForEmployeeIdGetWithRequestBuilder(_id: Int) -> RequestBuilder<[ExpenseReimburseRequestDTO]> {
        var path = "/api/ExpenseReimburseRequests/GetExpenseReimburseRequestRaisedForEmployee/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[ExpenseReimburseRequestDTO]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiExpenseReimburseRequestsGetExpenseReimburseRequestsGet(completion: @escaping ((_ data: [ExpenseReimburseRequestDTO]?,_ error: Error?) -> Void)) {
        apiExpenseReimburseRequestsGetExpenseReimburseRequestsGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /api/ExpenseReimburseRequests/GetExpenseReimburseRequests
     - 

     - examples: [{contentType=application/json, example=[ {
  "showEditDelete" : true,
  "employeeName" : "employeeName",
  "comments" : "comments",
  "expenseSubClaims" : [ {
    "currencyType" : "currencyType",
    "workTaskId" : 5,
    "departmentId" : 7,
    "description" : "description",
    "project" : "project",
    "approvalStatusTypeId" : 9,
    "documentIDs" : "documentIDs",
    "vendor" : "vendor",
    "id" : 2,
    "invoiceNo" : "invoiceNo",
    "department" : "department",
    "expenseReimbClaimAmount" : 7.386281948385884,
    "employeeName" : "employeeName",
    "expenseType" : "expenseType",
    "workTask" : "workTask",
    "employeeId" : 4,
    "tax" : 1.2315135,
    "invoiceDate" : "2000-01-23T04:56:07.000+00:00",
    "currencyTypeId" : 1,
    "approvedDate" : "2000-01-23T04:56:07.000+00:00",
    "subProjectId" : 4,
    "expReimReqDate" : "2000-01-23T04:56:07.000+00:00",
    "subProject" : "subProject",
    "location" : "location",
    "expenseTypeId" : 6,
    "taxAmount" : 1.0246457001441578,
    "approvalStatusType" : "approvalStatusType",
    "projectId" : 1
  }, {
    "currencyType" : "currencyType",
    "workTaskId" : 5,
    "departmentId" : 7,
    "description" : "description",
    "project" : "project",
    "approvalStatusTypeId" : 9,
    "documentIDs" : "documentIDs",
    "vendor" : "vendor",
    "id" : 2,
    "invoiceNo" : "invoiceNo",
    "department" : "department",
    "expenseReimbClaimAmount" : 7.386281948385884,
    "employeeName" : "employeeName",
    "expenseType" : "expenseType",
    "workTask" : "workTask",
    "employeeId" : 4,
    "tax" : 1.2315135,
    "invoiceDate" : "2000-01-23T04:56:07.000+00:00",
    "currencyTypeId" : 1,
    "approvedDate" : "2000-01-23T04:56:07.000+00:00",
    "subProjectId" : 4,
    "expReimReqDate" : "2000-01-23T04:56:07.000+00:00",
    "subProject" : "subProject",
    "location" : "location",
    "expenseTypeId" : 6,
    "taxAmount" : 1.0246457001441578,
    "approvalStatusType" : "approvalStatusType",
    "projectId" : 1
  } ],
  "workTask" : "workTask",
  "workTaskId" : 9,
  "departmentId" : 5,
  "totalClaimAmount" : 5.962133916683182,
  "project" : "project",
  "expenseReportTitle" : "expenseReportTitle",
  "employeeId" : 6,
  "approvalStatusTypeId" : 3,
  "currencyTypeId" : 1,
  "approvedDate" : "2000-01-23T04:56:07.000+00:00",
  "subProjectId" : 7,
  "expReimReqDate" : "2000-01-23T04:56:07.000+00:00",
  "subProject" : "subProject",
  "id" : 0,
  "department" : "department",
  "approvalStatusType" : "approvalStatusType",
  "projectId" : 2
}, {
  "showEditDelete" : true,
  "employeeName" : "employeeName",
  "comments" : "comments",
  "expenseSubClaims" : [ {
    "currencyType" : "currencyType",
    "workTaskId" : 5,
    "departmentId" : 7,
    "description" : "description",
    "project" : "project",
    "approvalStatusTypeId" : 9,
    "documentIDs" : "documentIDs",
    "vendor" : "vendor",
    "id" : 2,
    "invoiceNo" : "invoiceNo",
    "department" : "department",
    "expenseReimbClaimAmount" : 7.386281948385884,
    "employeeName" : "employeeName",
    "expenseType" : "expenseType",
    "workTask" : "workTask",
    "employeeId" : 4,
    "tax" : 1.2315135,
    "invoiceDate" : "2000-01-23T04:56:07.000+00:00",
    "currencyTypeId" : 1,
    "approvedDate" : "2000-01-23T04:56:07.000+00:00",
    "subProjectId" : 4,
    "expReimReqDate" : "2000-01-23T04:56:07.000+00:00",
    "subProject" : "subProject",
    "location" : "location",
    "expenseTypeId" : 6,
    "taxAmount" : 1.0246457001441578,
    "approvalStatusType" : "approvalStatusType",
    "projectId" : 1
  }, {
    "currencyType" : "currencyType",
    "workTaskId" : 5,
    "departmentId" : 7,
    "description" : "description",
    "project" : "project",
    "approvalStatusTypeId" : 9,
    "documentIDs" : "documentIDs",
    "vendor" : "vendor",
    "id" : 2,
    "invoiceNo" : "invoiceNo",
    "department" : "department",
    "expenseReimbClaimAmount" : 7.386281948385884,
    "employeeName" : "employeeName",
    "expenseType" : "expenseType",
    "workTask" : "workTask",
    "employeeId" : 4,
    "tax" : 1.2315135,
    "invoiceDate" : "2000-01-23T04:56:07.000+00:00",
    "currencyTypeId" : 1,
    "approvedDate" : "2000-01-23T04:56:07.000+00:00",
    "subProjectId" : 4,
    "expReimReqDate" : "2000-01-23T04:56:07.000+00:00",
    "subProject" : "subProject",
    "location" : "location",
    "expenseTypeId" : 6,
    "taxAmount" : 1.0246457001441578,
    "approvalStatusType" : "approvalStatusType",
    "projectId" : 1
  } ],
  "workTask" : "workTask",
  "workTaskId" : 9,
  "departmentId" : 5,
  "totalClaimAmount" : 5.962133916683182,
  "project" : "project",
  "expenseReportTitle" : "expenseReportTitle",
  "employeeId" : 6,
  "approvalStatusTypeId" : 3,
  "currencyTypeId" : 1,
  "approvedDate" : "2000-01-23T04:56:07.000+00:00",
  "subProjectId" : 7,
  "expReimReqDate" : "2000-01-23T04:56:07.000+00:00",
  "subProject" : "subProject",
  "id" : 0,
  "department" : "department",
  "approvalStatusType" : "approvalStatusType",
  "projectId" : 2
} ]}]

     - returns: RequestBuilder<[ExpenseReimburseRequestDTO]> 
     */
    open class func apiExpenseReimburseRequestsGetExpenseReimburseRequestsGetWithRequestBuilder() -> RequestBuilder<[ExpenseReimburseRequestDTO]> {
        let path = "/api/ExpenseReimburseRequests/GetExpenseReimburseRequests"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[ExpenseReimburseRequestDTO]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter documents: (form)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiExpenseReimburseRequestsPostDocumentsPost(documents: [Data]? = nil, completion: @escaping ((_ data: [FileDocumentDTO]?,_ error: Error?) -> Void)) {
        apiExpenseReimburseRequestsPostDocumentsPostWithRequestBuilder(documents: documents).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /api/ExpenseReimburseRequests/PostDocuments
     - 

     - examples: [{contentType=application/json, example=[ {
  "actualFileName" : "actualFileName",
  "id" : 0
}, {
  "actualFileName" : "actualFileName",
  "id" : 0
} ]}]
     - parameter documents: (form)  (optional)

     - returns: RequestBuilder<[FileDocumentDTO]> 
     */
    open class func apiExpenseReimburseRequestsPostDocumentsPostWithRequestBuilder(documents: [Data]? = nil) -> RequestBuilder<[FileDocumentDTO]> {
        let path = "/api/ExpenseReimburseRequests/PostDocuments"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
                "Documents": documents
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[FileDocumentDTO]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiExpenseReimburseRequestsPostExpenseReimburseRequestPost(body: ExpenseReimburseRequestDTO? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        apiExpenseReimburseRequestsPostExpenseReimburseRequestPostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /api/ExpenseReimburseRequests/PostExpenseReimburseRequest
     - 

     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func apiExpenseReimburseRequestsPostExpenseReimburseRequestPostWithRequestBuilder(body: ExpenseReimburseRequestDTO? = nil) -> RequestBuilder<Void> {
        let path = "/api/ExpenseReimburseRequests/PostExpenseReimburseRequest"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**

     - parameter body: (body)  (optional)
     - parameter _id: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiExpenseReimburseRequestsPutExpenseReimburseRequestPut(body: ExpenseReimburseRequestDTO? = nil, _id: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        apiExpenseReimburseRequestsPutExpenseReimburseRequestPutWithRequestBuilder(body: body, _id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - PUT /api/ExpenseReimburseRequests/PutExpenseReimburseRequest
     - 

     - parameter body: (body)  (optional)
     - parameter _id: (query)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func apiExpenseReimburseRequestsPutExpenseReimburseRequestPutWithRequestBuilder(body: ExpenseReimburseRequestDTO? = nil, _id: Int? = nil) -> RequestBuilder<Void> {
        let path = "/api/ExpenseReimburseRequests/PutExpenseReimburseRequest"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "id": _id?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
