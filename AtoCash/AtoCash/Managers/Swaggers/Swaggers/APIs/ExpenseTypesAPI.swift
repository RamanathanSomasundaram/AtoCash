//
// ExpenseTypesAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class ExpenseTypesAPI {
    /**

     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiExpenseTypesDeleteExpenseTypeIdDelete(_id: Int, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        apiExpenseTypesDeleteExpenseTypeIdDeleteWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /api/ExpenseTypes/DeleteExpenseType/{id}
     - 

     - parameter _id: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func apiExpenseTypesDeleteExpenseTypeIdDeleteWithRequestBuilder(_id: Int) -> RequestBuilder<Void> {
        var path = "/api/ExpenseTypes/DeleteExpenseType/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiExpenseTypesExpenseTypesForDropdownGet(completion: @escaping ((_ data: [ExpenseTypeVM]?,_ error: Error?) -> Void)) {
        apiExpenseTypesExpenseTypesForDropdownGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /api/ExpenseTypes/ExpenseTypesForDropdown
     - 

     - examples: [{contentType=application/json, example=[ {
  "expenseTypeName" : "expenseTypeName",
  "id" : 0
}, {
  "expenseTypeName" : "expenseTypeName",
  "id" : 0
} ]}]

     - returns: RequestBuilder<[ExpenseTypeVM]> 
     */
    open class func apiExpenseTypesExpenseTypesForDropdownGetWithRequestBuilder() -> RequestBuilder<[ExpenseTypeVM]> {
        let path = "/api/ExpenseTypes/ExpenseTypesForDropdown"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[ExpenseTypeVM]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiExpenseTypesGetExpenseTypeIdGet(_id: Int, completion: @escaping ((_ data: ExpenseTypeDTO?,_ error: Error?) -> Void)) {
        apiExpenseTypesGetExpenseTypeIdGetWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /api/ExpenseTypes/GetExpenseType/{id}
     - 

     - examples: [{contentType=application/json, example={
  "statusType" : "statusType",
  "expenseTypeDesc" : "expenseTypeDesc",
  "expenseTypeName" : "expenseTypeName",
  "statusTypeId" : 6,
  "id" : 0
}}]
     - parameter _id: (path)  

     - returns: RequestBuilder<ExpenseTypeDTO> 
     */
    open class func apiExpenseTypesGetExpenseTypeIdGetWithRequestBuilder(_id: Int) -> RequestBuilder<ExpenseTypeDTO> {
        var path = "/api/ExpenseTypes/GetExpenseType/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ExpenseTypeDTO>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiExpenseTypesGetExpenseTypesGet(completion: @escaping ((_ data: [ExpenseTypeDTO]?,_ error: Error?) -> Void)) {
        apiExpenseTypesGetExpenseTypesGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /api/ExpenseTypes/GetExpenseTypes
     - 

     - examples: [{contentType=application/json, example=[ {
  "statusType" : "statusType",
  "expenseTypeDesc" : "expenseTypeDesc",
  "expenseTypeName" : "expenseTypeName",
  "statusTypeId" : 6,
  "id" : 0
}, {
  "statusType" : "statusType",
  "expenseTypeDesc" : "expenseTypeDesc",
  "expenseTypeName" : "expenseTypeName",
  "statusTypeId" : 6,
  "id" : 0
} ]}]

     - returns: RequestBuilder<[ExpenseTypeDTO]> 
     */
    open class func apiExpenseTypesGetExpenseTypesGetWithRequestBuilder() -> RequestBuilder<[ExpenseTypeDTO]> {
        let path = "/api/ExpenseTypes/GetExpenseTypes"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[ExpenseTypeDTO]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiExpenseTypesPostExpenseTypePost(body: ExpenseTypeDTO? = nil, completion: @escaping ((_ data: ExpenseType?,_ error: Error?) -> Void)) {
        apiExpenseTypesPostExpenseTypePostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /api/ExpenseTypes/PostExpenseType
     - 

     - examples: [{contentType=application/json, example={
  "statusType" : {
    "id" : 7,
    "status" : "status"
  },
  "expenseTypeDesc" : "expenseTypeDesc",
  "expenseTypeName" : "expenseTypeName",
  "statusTypeId" : 5,
  "id" : 1
}}]
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<ExpenseType> 
     */
    open class func apiExpenseTypesPostExpenseTypePostWithRequestBuilder(body: ExpenseTypeDTO? = nil) -> RequestBuilder<ExpenseType> {
        let path = "/api/ExpenseTypes/PostExpenseType"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ExpenseType>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**

     - parameter _id: (path)  
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiExpenseTypesPutExpenseTypeIdPut(_id: Int, body: ExpenseTypeDTO? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        apiExpenseTypesPutExpenseTypeIdPutWithRequestBuilder(_id: _id, body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - PUT /api/ExpenseTypes/PutExpenseType/{id}
     - 

     - parameter _id: (path)  
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func apiExpenseTypesPutExpenseTypeIdPutWithRequestBuilder(_id: Int, body: ExpenseTypeDTO? = nil) -> RequestBuilder<Void> {
        var path = "/api/ExpenseTypes/PutExpenseType/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
