//
// ReportsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class ReportsAPI {
    /**

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiReportsAccountsPayableDataPost(body: AccountsPayableSearchModel? = nil, completion: @escaping ((_ data: [DisbursementsAndClaimsMasterDTO]?,_ error: Error?) -> Void)) {
        apiReportsAccountsPayableDataPostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /api/Reports/AccountsPayableData
     - 

     - examples: [{contentType=application/json, example=[ {
  "currencyType" : "currencyType",
  "subProjectName" : "subProjectName",
  "requestTypeId" : 5,
  "workTaskId" : 3,
  "departmentId" : 2,
  "workTaskName" : "workTaskName",
  "isSettledAmountCredited" : true,
  "costCenterId" : 1,
  "recordDate" : "2000-01-23T04:56:07.000+00:00",
  "id" : 0,
  "settledDate" : "2000-01-23T04:56:07.000+00:00",
  "additionalData" : "additionalData",
  "department" : "department",
  "employeeName" : "employeeName",
  "requestType" : "requestType",
  "costCenter" : "costCenter",
  "expenseReimburseReqId" : 5,
  "claimAmount" : 4.145608029883936,
  "employeeId" : 6,
  "amountToWallet" : 7.386281948385884,
  "approvalStatusId" : 1,
  "currencyTypeId" : 2,
  "settlementBankCard" : "settlementBankCard",
  "pettyCashRequestId" : 1,
  "subProjectId" : 9,
  "settlementComment" : "settlementComment",
  "projectName" : "projectName",
  "approvalStatusType" : "approvalStatusType",
  "projectId" : 7,
  "amountToCredit" : 1.2315135367772556,
  "settlementAccount" : "settlementAccount"
}, {
  "currencyType" : "currencyType",
  "subProjectName" : "subProjectName",
  "requestTypeId" : 5,
  "workTaskId" : 3,
  "departmentId" : 2,
  "workTaskName" : "workTaskName",
  "isSettledAmountCredited" : true,
  "costCenterId" : 1,
  "recordDate" : "2000-01-23T04:56:07.000+00:00",
  "id" : 0,
  "settledDate" : "2000-01-23T04:56:07.000+00:00",
  "additionalData" : "additionalData",
  "department" : "department",
  "employeeName" : "employeeName",
  "requestType" : "requestType",
  "costCenter" : "costCenter",
  "expenseReimburseReqId" : 5,
  "claimAmount" : 4.145608029883936,
  "employeeId" : 6,
  "amountToWallet" : 7.386281948385884,
  "approvalStatusId" : 1,
  "currencyTypeId" : 2,
  "settlementBankCard" : "settlementBankCard",
  "pettyCashRequestId" : 1,
  "subProjectId" : 9,
  "settlementComment" : "settlementComment",
  "projectName" : "projectName",
  "approvalStatusType" : "approvalStatusType",
  "projectId" : 7,
  "amountToCredit" : 1.2315135367772556,
  "settlementAccount" : "settlementAccount"
} ]}]
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<[DisbursementsAndClaimsMasterDTO]> 
     */
    open class func apiReportsAccountsPayableDataPostWithRequestBuilder(body: AccountsPayableSearchModel? = nil) -> RequestBuilder<[DisbursementsAndClaimsMasterDTO]> {
        let path = "/api/Reports/AccountsPayableData"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[DisbursementsAndClaimsMasterDTO]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiReportsAccountsPayableReportPost(body: AccountsPayableSearchModel? = nil, completion: @escaping ((_ data: [DisbursementsAndClaimsMasterDTO]?,_ error: Error?) -> Void)) {
        apiReportsAccountsPayableReportPostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /api/Reports/AccountsPayableReport
     - 

     - examples: [{contentType=application/json, example=[ {
  "currencyType" : "currencyType",
  "subProjectName" : "subProjectName",
  "requestTypeId" : 5,
  "workTaskId" : 3,
  "departmentId" : 2,
  "workTaskName" : "workTaskName",
  "isSettledAmountCredited" : true,
  "costCenterId" : 1,
  "recordDate" : "2000-01-23T04:56:07.000+00:00",
  "id" : 0,
  "settledDate" : "2000-01-23T04:56:07.000+00:00",
  "additionalData" : "additionalData",
  "department" : "department",
  "employeeName" : "employeeName",
  "requestType" : "requestType",
  "costCenter" : "costCenter",
  "expenseReimburseReqId" : 5,
  "claimAmount" : 4.145608029883936,
  "employeeId" : 6,
  "amountToWallet" : 7.386281948385884,
  "approvalStatusId" : 1,
  "currencyTypeId" : 2,
  "settlementBankCard" : "settlementBankCard",
  "pettyCashRequestId" : 1,
  "subProjectId" : 9,
  "settlementComment" : "settlementComment",
  "projectName" : "projectName",
  "approvalStatusType" : "approvalStatusType",
  "projectId" : 7,
  "amountToCredit" : 1.2315135367772556,
  "settlementAccount" : "settlementAccount"
}, {
  "currencyType" : "currencyType",
  "subProjectName" : "subProjectName",
  "requestTypeId" : 5,
  "workTaskId" : 3,
  "departmentId" : 2,
  "workTaskName" : "workTaskName",
  "isSettledAmountCredited" : true,
  "costCenterId" : 1,
  "recordDate" : "2000-01-23T04:56:07.000+00:00",
  "id" : 0,
  "settledDate" : "2000-01-23T04:56:07.000+00:00",
  "additionalData" : "additionalData",
  "department" : "department",
  "employeeName" : "employeeName",
  "requestType" : "requestType",
  "costCenter" : "costCenter",
  "expenseReimburseReqId" : 5,
  "claimAmount" : 4.145608029883936,
  "employeeId" : 6,
  "amountToWallet" : 7.386281948385884,
  "approvalStatusId" : 1,
  "currencyTypeId" : 2,
  "settlementBankCard" : "settlementBankCard",
  "pettyCashRequestId" : 1,
  "subProjectId" : 9,
  "settlementComment" : "settlementComment",
  "projectName" : "projectName",
  "approvalStatusType" : "approvalStatusType",
  "projectId" : 7,
  "amountToCredit" : 1.2315135367772556,
  "settlementAccount" : "settlementAccount"
} ]}]
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<[DisbursementsAndClaimsMasterDTO]> 
     */
    open class func apiReportsAccountsPayableReportPostWithRequestBuilder(body: AccountsPayableSearchModel? = nil) -> RequestBuilder<[DisbursementsAndClaimsMasterDTO]> {
        let path = "/api/Reports/AccountsPayableReport"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[DisbursementsAndClaimsMasterDTO]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiReportsGetAdvanceAndReimburseReportsEmployeeExcelPost(body: CashAndClaimRequestSearchModel? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        apiReportsGetAdvanceAndReimburseReportsEmployeeExcelPostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /api/Reports/GetAdvanceAndReimburseReportsEmployeeExcel
     - 

     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func apiReportsGetAdvanceAndReimburseReportsEmployeeExcelPostWithRequestBuilder(body: CashAndClaimRequestSearchModel? = nil) -> RequestBuilder<Void> {
        let path = "/api/Reports/GetAdvanceAndReimburseReportsEmployeeExcel"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiReportsGetAdvanceAndReimburseReportsEmployeeJsonPost(body: CashAndClaimRequestSearchModel? = nil, completion: @escaping ((_ data: [ReportsModel]?,_ error: Error?) -> Void)) {
        apiReportsGetAdvanceAndReimburseReportsEmployeeJsonPostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((response?.body), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /api/Reports/GetAdvanceAndReimburseReportsEmployeeJson
     - 

     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func apiReportsGetAdvanceAndReimburseReportsEmployeeJsonPostWithRequestBuilder(body: CashAndClaimRequestSearchModel? = nil) -> RequestBuilder<[ReportsModel]> {
        let path = "/api/Reports/GetAdvanceAndReimburseReportsEmployeeJson"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[ReportsModel]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiReportsGetEmployeesDataPost(body: EmployeeSearchModel? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        apiReportsGetEmployeesDataPostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /api/Reports/GetEmployeesData
     - 

     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func apiReportsGetEmployeesDataPostWithRequestBuilder(body: EmployeeSearchModel? = nil) -> RequestBuilder<Void> {
        let path = "/api/Reports/GetEmployeesData"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiReportsGetEmployeesReportPost(body: EmployeeSearchModel? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        apiReportsGetEmployeesReportPostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /api/Reports/GetEmployeesReport
     - 

     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func apiReportsGetEmployeesReportPostWithRequestBuilder(body: EmployeeSearchModel? = nil) -> RequestBuilder<Void> {
        let path = "/api/Reports/GetEmployeesReport"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiReportsGetTravelRequestReportForEmployeeExcelPost(body: TravelRequestSearchModel? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        apiReportsGetTravelRequestReportForEmployeeExcelPostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /api/Reports/GetTravelRequestReportForEmployeeExcel
     - 

     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func apiReportsGetTravelRequestReportForEmployeeExcelPostWithRequestBuilder(body: TravelRequestSearchModel? = nil) -> RequestBuilder<Void> {
        let path = "/api/Reports/GetTravelRequestReportForEmployeeExcel"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiReportsGetTravelRequestReportForEmployeeJsonPost(body: TravelRequestSearchModel? = nil, completion: @escaping ((_ data: [TravelApprovalReportDTO]?,_ error: Error?) -> Void)) {
        apiReportsGetTravelRequestReportForEmployeeJsonPostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((response?.body), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /api/Reports/GetTravelRequestReportForEmployeeJson
     - 

     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func apiReportsGetTravelRequestReportForEmployeeJsonPostWithRequestBuilder(body: TravelRequestSearchModel? = nil) -> RequestBuilder<[TravelApprovalReportDTO]> {
        let path = "/api/Reports/GetTravelRequestReportForEmployeeJson"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[TravelApprovalReportDTO]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiReportsGetUsersByRoleIdPost(body: RoleToUserSearch? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        apiReportsGetUsersByRoleIdPostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /api/Reports/GetUsersByRoleId
     - 

     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func apiReportsGetUsersByRoleIdPostWithRequestBuilder(body: RoleToUserSearch? = nil) -> RequestBuilder<Void> {
        let path = "/api/Reports/GetUsersByRoleId"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiReportsGetUsersByRoleIdReportPost(body: RoleToUserSearch? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        apiReportsGetUsersByRoleIdReportPostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /api/Reports/GetUsersByRoleIdReport
     - 

     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func apiReportsGetUsersByRoleIdReportPostWithRequestBuilder(body: RoleToUserSearch? = nil) -> RequestBuilder<Void> {
        let path = "/api/Reports/GetUsersByRoleIdReport"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
