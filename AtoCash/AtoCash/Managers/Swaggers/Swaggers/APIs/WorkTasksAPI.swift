//
// WorkTasksAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class WorkTasksAPI {
    /**

     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiWorkTasksDeleteWorkTaskIdDelete(_id: Int, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        apiWorkTasksDeleteWorkTaskIdDeleteWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /api/WorkTasks/DeleteWorkTask/{id}
     - 

     - parameter _id: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func apiWorkTasksDeleteWorkTaskIdDeleteWithRequestBuilder(_id: Int) -> RequestBuilder<Void> {
        var path = "/api/WorkTasks/DeleteWorkTask/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiWorkTasksGetWorkTaskIdGet(_id: Int, completion: @escaping ((_ data: WorkTaskDTO?,_ error: Error?) -> Void)) {
        apiWorkTasksGetWorkTaskIdGetWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /api/WorkTasks/GetWorkTask/{id}
     - 

     - examples: [{contentType=application/json, example={
  "taskDesc" : "taskDesc",
  "subProjectId" : 6,
  "subProject" : "subProject",
  "taskName" : "taskName",
  "id" : 0
}}]
     - parameter _id: (path)  

     - returns: RequestBuilder<WorkTaskDTO> 
     */
    open class func apiWorkTasksGetWorkTaskIdGetWithRequestBuilder(_id: Int) -> RequestBuilder<WorkTaskDTO> {
        var path = "/api/WorkTasks/GetWorkTask/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<WorkTaskDTO>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiWorkTasksGetWorkTasksForDropdownGet(completion: @escaping ((_ data: [WorkTaskVM]?,_ error: Error?) -> Void)) {
        apiWorkTasksGetWorkTasksForDropdownGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /api/WorkTasks/GetWorkTasksForDropdown
     - 

     - examples: [{contentType=application/json, example=[ {
  "taskName" : "taskName",
  "id" : 0
}, {
  "taskName" : "taskName",
  "id" : 0
} ]}]

     - returns: RequestBuilder<[WorkTaskVM]> 
     */
    open class func apiWorkTasksGetWorkTasksForDropdownGetWithRequestBuilder() -> RequestBuilder<[WorkTaskVM]> {
        let path = "/api/WorkTasks/GetWorkTasksForDropdown"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[WorkTaskVM]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiWorkTasksGetWorkTasksForSubProjectsIdGet(_id: Int, completion: @escaping ((_ data: [TaskModel]?,_ error: Error?) -> Void)) {
        apiWorkTasksGetWorkTasksForSubProjectsIdGetWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /api/WorkTasks/GetWorkTasksForSubProjects/{id}
     - 

     - examples: [{contentType=application/json, example=[ {
  "subProjectName" : "subProjectName",
  "id" : 0
}, {
  "subProjectName" : "subProjectName",
  "id" : 0
} ]}]
     - parameter _id: (path)  

     - returns: RequestBuilder<[SubProjectVM]> 
     */
    open class func apiWorkTasksGetWorkTasksForSubProjectsIdGetWithRequestBuilder(_id: Int) -> RequestBuilder<[TaskModel]> {
        var path = "/api/WorkTasks/GetWorkTasksForSubProjects/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[TaskModel]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiWorkTasksGetWorkTasksGet(completion: @escaping ((_ data: [WorkTaskDTO]?,_ error: Error?) -> Void)) {
        apiWorkTasksGetWorkTasksGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /api/WorkTasks/GetWorkTasks
     - 

     - examples: [{contentType=application/json, example=[ {
  "taskDesc" : "taskDesc",
  "subProjectId" : 6,
  "subProject" : "subProject",
  "taskName" : "taskName",
  "id" : 0
}, {
  "taskDesc" : "taskDesc",
  "subProjectId" : 6,
  "subProject" : "subProject",
  "taskName" : "taskName",
  "id" : 0
} ]}]

     - returns: RequestBuilder<[WorkTaskDTO]> 
     */
    open class func apiWorkTasksGetWorkTasksGetWithRequestBuilder() -> RequestBuilder<[WorkTaskDTO]> {
        let path = "/api/WorkTasks/GetWorkTasks"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[WorkTaskDTO]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiWorkTasksPostWorkTaskPost(body: WorkTaskDTO? = nil, completion: @escaping ((_ data: WorkTask?,_ error: Error?) -> Void)) {
        apiWorkTasksPostWorkTaskPostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /api/WorkTasks/PostWorkTask
     - 

     - examples: [{contentType=application/json, example={
  "taskDesc" : "taskDesc",
  "subProjectId" : 5,
  "taskName" : "taskName",
  "id" : 6
}}]
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<WorkTask> 
     */
    open class func apiWorkTasksPostWorkTaskPostWithRequestBuilder(body: WorkTaskDTO? = nil) -> RequestBuilder<WorkTask> {
        let path = "/api/WorkTasks/PostWorkTask"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<WorkTask>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**

     - parameter _id: (path)  
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiWorkTasksPutWorkTaskIdPut(_id: Int, body: WorkTaskDTO? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        apiWorkTasksPutWorkTaskIdPutWithRequestBuilder(_id: _id, body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - PUT /api/WorkTasks/PutWorkTask/{id}
     - 

     - parameter _id: (path)  
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func apiWorkTasksPutWorkTaskIdPutWithRequestBuilder(_id: Int, body: WorkTaskDTO? = nil) -> RequestBuilder<Void> {
        var path = "/api/WorkTasks/PutWorkTask/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiWorkTasksWorkTasksForDropdownGet(completion: @escaping ((_ data: [WorkTaskVM]?,_ error: Error?) -> Void)) {
        apiWorkTasksWorkTasksForDropdownGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /api/WorkTasks/WorkTasksForDropdown
     - 

     - examples: [{contentType=application/json, example=[ {
  "taskName" : "taskName",
  "id" : 0
}, {
  "taskName" : "taskName",
  "id" : 0
} ]}]

     - returns: RequestBuilder<[WorkTaskVM]> 
     */
    open class func apiWorkTasksWorkTasksForDropdownGetWithRequestBuilder() -> RequestBuilder<[WorkTaskVM]> {
        let path = "/api/WorkTasks/WorkTasksForDropdown"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[WorkTaskVM]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
}
