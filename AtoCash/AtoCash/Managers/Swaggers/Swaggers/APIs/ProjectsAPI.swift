//
// ProjectsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class ProjectsAPI {
    /**

     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiProjectsDeleteProjectIdDelete(_id: Int, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        apiProjectsDeleteProjectIdDeleteWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /api/Projects/DeleteProject/{id}
     - 

     - parameter _id: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func apiProjectsDeleteProjectIdDeleteWithRequestBuilder(_id: Int) -> RequestBuilder<Void> {
        var path = "/api/Projects/DeleteProject/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    
    /**

     - parameter _id: (path)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiBusinessTypeGet(completion: @escaping ((_ data: [BusinessTypeVM]?,_ error: Error?) -> Void)) {
        apiBusinessTypeGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }
    open class func apiBusinessTypeGetWithRequestBuilder() -> RequestBuilder<[BusinessTypeVM]> {
        var path = "/api/BusinessTypes/BusinessTypesForDropdown"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[BusinessTypeVM]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    
    //api/BusinessUnits/GetBusinessUnit/
    open class func apiBusinessUnitLocationGet(_id: Int,completion: @escaping ((_ data: BusinessUnitLocationVM?,_ error: Error?) -> Void)) {
        apiBusinessUnitLocationGetWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }
    open class func apiBusinessUnitLocationGetWithRequestBuilder(_id: Int) -> RequestBuilder<BusinessUnitLocationVM> {
        var path = "/api/BusinessUnits/GetBusinessUnit/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<BusinessUnitLocationVM>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
 
    open class func apiBusinessUnitPOST(body: BusinessUnitDTO? = nil, completion: @escaping ((_ data: [BusinessUnitVM]?,_ error: Error?) -> Void)) {
        apiBusinessUnitPOSTWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }
    
    open class func apiBusinessUnitPOSTWithRequestBuilder(body: BusinessUnitDTO? = nil) -> RequestBuilder<[BusinessUnitVM]> {
            let path = "/api/BusinessUnits/BusinessUnitsByBizTypeIdAndEmpIdForDropdown"
            let URLString = SwaggerClientAPI.basePath + path
            let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
            let url = URLComponents(string: URLString)


            let requestBuilder: RequestBuilder<[BusinessUnitVM]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
        }
    /**

     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiProjectsGetEmployeeAssignedProjectsIdGet(_id: Int, completion: @escaping ((_ data: [ProjectVM]?,_ error: Error?) -> Void)) {
        apiProjectsGetEmployeeAssignedProjectsIdGetWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /api/Projects/GetEmployeeAssignedProjects/{id}
     - 

     - examples: [{contentType=application/json, example={
  "id" : 0,
  "projectName" : "projectName"
}}]
     - parameter _id: (path)  

     - returns: RequestBuilder<ProjectVM> 
     */
    open class func apiProjectsGetEmployeeAssignedProjectsIdGetWithRequestBuilder(_id: Int) -> RequestBuilder<[ProjectVM]> {
        var path = "/api/Projects/GetEmployeeAssignedProjects/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[ProjectVM]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiProjectsGetProjectIdGet(_id: Int, completion: @escaping ((_ data: ProjectDTO?,_ error: Error?) -> Void)) {
        apiProjectsGetProjectIdGetWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /api/Projects/GetProject/{id}
     - 

     - examples: [{contentType=application/json, example={
  "projectManager" : "projectManager",
  "statusType" : "statusType",
  "costCenterId" : 6,
  "costCenter" : "costCenter",
  "statusTypeId" : 5,
  "projectManagerId" : 1,
  "projectDesc" : "projectDesc",
  "id" : 0,
  "projectName" : "projectName"
}}]
     - parameter _id: (path)  

     - returns: RequestBuilder<ProjectDTO> 
     */
    open class func apiProjectsGetProjectIdGetWithRequestBuilder(_id: Int) -> RequestBuilder<ProjectDTO> {
        var path = "/api/Projects/GetProject/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ProjectDTO>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiProjectsGetProjectsGet(completion: @escaping ((_ data: [ProjectDTO]?,_ error: Error?) -> Void)) {
        apiProjectsGetProjectsGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /api/Projects/GetProjects
     - 

     - examples: [{contentType=application/json, example=[ {
  "projectManager" : "projectManager",
  "statusType" : "statusType",
  "costCenterId" : 6,
  "costCenter" : "costCenter",
  "statusTypeId" : 5,
  "projectManagerId" : 1,
  "projectDesc" : "projectDesc",
  "id" : 0,
  "projectName" : "projectName"
}, {
  "projectManager" : "projectManager",
  "statusType" : "statusType",
  "costCenterId" : 6,
  "costCenter" : "costCenter",
  "statusTypeId" : 5,
  "projectManagerId" : 1,
  "projectDesc" : "projectDesc",
  "id" : 0,
  "projectName" : "projectName"
} ]}]

     - returns: RequestBuilder<[ProjectDTO]> 
     */
    open class func apiProjectsGetProjectsGetWithRequestBuilder() -> RequestBuilder<[ProjectDTO]> {
        let path = "/api/Projects/GetProjects"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[ProjectDTO]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiProjectsPostProjectPost(body: ProjectDTO? = nil, completion: @escaping ((_ data: Project?,_ error: Error?) -> Void)) {
        apiProjectsPostProjectPostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /api/Projects/PostProject
     - 

     - examples: [{contentType=application/json, example={
  "costCenterId" : 9,
  "statusTypeId" : 3,
  "projectManagerId" : 6,
  "projectDesc" : "projectDesc",
  "id" : 8,
  "projectName" : "projectName"
}}]
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Project> 
     */
    open class func apiProjectsPostProjectPostWithRequestBuilder(body: ProjectDTO? = nil) -> RequestBuilder<Project> {
        let path = "/api/Projects/PostProject"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Project>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiProjectsProjectsForDropdownGet(completion: @escaping ((_ data: [ProjectVM]?,_ error: Error?) -> Void)) {
        apiProjectsProjectsForDropdownGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /api/Projects/ProjectsForDropdown
     - 

     - examples: [{contentType=application/json, example=[ {
  "id" : 0,
  "projectName" : "projectName"
}, {
  "id" : 0,
  "projectName" : "projectName"
} ]}]

     - returns: RequestBuilder<[ProjectVM]> 
     */
    open class func apiProjectsProjectsForDropdownGetWithRequestBuilder() -> RequestBuilder<[ProjectVM]> {
        let path = "/api/Projects/ProjectsForDropdown"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[ProjectVM]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter _id: (path)  
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiProjectsPutProjectIdPut(_id: Int, body: ProjectDTO? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        apiProjectsPutProjectIdPutWithRequestBuilder(_id: _id, body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - PUT /api/Projects/PutProject/{id}
     - 

     - parameter _id: (path)  
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func apiProjectsPutProjectIdPutWithRequestBuilder(_id: Int, body: ProjectDTO? = nil) -> RequestBuilder<Void> {
        var path = "/api/Projects/PutProject/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
